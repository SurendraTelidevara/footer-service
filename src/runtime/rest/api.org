#+Title: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-04-14 Fri]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END: 
  This document illustrates building of the REST API.


  
* REST

** Get footer
*** API Designs 
**** Get all links
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_links
  :END:    
  - URL :: /footer

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
  {
    "lab integration kit releases": "http://community.virtual-labs.ac.in/w/index.php/Download",
    "First Integration Workshop at IIIT Hyderabad": "http://community.virtual-labs.ac.in/w/index.php/First_Integration_workshop",
    "Summer Integration Workshop at IIT Guwahati": "http://community.virtual-labs.ac.in/w/index.php/Summer_Sprint_Integration_workshop",
    "QA Integration Workshop at IIIT Hyderabad": "http://community.virtual-labs.ac.in/w/index.php/QA/Integration_workshop",
    "College Cloud Edition Workshop at IIIT Hyderabad": "http://community.vlabs.ac.in/docs/workshop-reports/report.html",
    "A new set of 25 Virtual Labs on Portable Media": "http://community.virtual-labs.ac.in/w/index.php A_new_set_of_25_Virtual_Labs_on_Portable_Media",
    "Contact us": "http://vlabs.ac.in:5959/contactus/",
    "Feedback": "http://feedback.vlabs.ac.in/",
    "Licensing": "http://vlabs.ac.in:5959/licensing/",
    "Teachers' Community": "https://plus.google.com/communities/104131148292250423165",
    "Lab Assessment Form": "http://209.211.220.205/labassessment/assessmentform.html",
    "College Cloud Edition": "http://vlabs.ac.in:5959/college-cloud-edition/",
    "Expression of Interest for Workshop": "http://vlabs.ac.in:5959/workshops/",
    "FAQ": "http://vlabs.ac.in:5959/faq/",
    "Community": "http://community.virtual-labs.ac.in/w/index.php/Main_Page",
    "Nodal Centers": "http://outreach.virtual-labs.ac.in/ncentres",
    "Sakshat Portal": "http://www.sakshat.ac.in/",
    "Outreach Portal": "http://outreach.virtual-labs.ac.in/",
    "Announcements": "http://vlabs.ac.in:5959/announcements/index.html",
    "Labs Developed by Nodal Centers": "http://209.211.220.205/vlabiitece/"
    }
]

#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
      {"status" : "error"} 
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/footer
#+END_EXAMPLE  

*** Implementation
#+NAME: get_footer
#+BEGIN_SRC python
@api.route('/footer', methods=['GET'])
def get_footer():
    if request.method == 'GET':
            try:
                current_app.logger.debug("running operation get_footer")
                current_app.logger.debug("completed operation get_lab")
                return jsonify(footer)

            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)
             
      
        else:
            try:
                current_app.logger.debug("running operation get_footer")                
                current_app.logger.debug("completed operation get_footer")
                return jsonify_list(footer)

            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)
         

#+END_SRC

*** Test Case
**** TestGetFooter
#+NAME: test_get_footer
#+BEGIN_SRC python
class TestGetFooter(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_footer(self):
        print "test_get_footer_in_rest"
       
        payload = {
		   "key": KEY,
                   "lab integration kit releases": "http://community.virtual-labs.ac.in/w/index.php/Download",
                   "First Integration Workshop at IIIT Hyderabad": "http://community.virtual-labs.ac.in/w/index.php/First_Integration_workshop",
                   "Summer Integration Workshop at IIT Guwahati": "http://community.virtual-labs.ac.in/w/index.php/Summer_Sprint_Integration_workshop",
                   "QA Integration Workshop at IIIT Hyderabad": "http://community.virtual-labs.ac.in/w/index.php/QA/Integration_workshop",
                   "College Cloud Edition Workshop at IIIT Hyderabad": "http://community.vlabs.ac.in/docs/workshop-reports/report.html",
                   "A new set of 25 Virtual Labs on Portable Media": "http://community.virtual-labs.ac.in/w/index.php A_new_set_of_25_Virtual_Labs_on_Portable_Media",
                   "Contact us": "http://vlabs.ac.in:5959/contactus/",
                   "Feedback": "http://feedback.vlabs.ac.in/",
                   "Licensing": "http://vlabs.ac.in:5959/licensing/",
                   "Teachers' Community": "https://plus.google.com/communities/104131148292250423165",
                   "Lab Assessment Form": "http://209.211.220.205/labassessment/assessmentform.html",
                   "College Cloud Edition": "http://vlabs.ac.in:5959/college-cloud-edition/",
                   "Expression of Interest for Workshop": "http://vlabs.ac.in:5959/workshops/",
                   "FAQ": "http://vlabs.ac.in:5959/faq/",
                   "Community": "http://community.virtual-labs.ac.in/w/index.php/Main_Page",
                   "Nodal Centers": "http://outreach.virtual-labs.ac.in/ncentres",
                   "Sakshat Portal": "http://www.sakshat.ac.in/",
                   "Outreach Portal": "http://outreach.virtual-labs.ac.in/",
                   "Announcements": "http://vlabs.ac.in:5959/announcements/index.html",
                   "Labs Developed by Nodal Centers": "http://209.211.220.205/vlabiitece/"
                   }
                
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/footer", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/footer", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import os
import requests
import json
from flask import session, render_template, Blueprint, request, \
     jsonify, abort, current_app, redirect, url_for
from flask import Flask
from runtime.utils.type_utils import jsonify_list
from runtime.exceptions.custom_exceptions import *
from runtime.system.system_interface import SystemInterface
import yaml

api = Blueprint('APIs', __name__)

#+end_src


** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.rest.app import create_app
from runtime.config.system_config import KEY
from runtime.rest.api import *
from runtime.system.system import System
import datetime
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangle                                                        :boilerplate:
  
** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<imports_for_sources>>
<<get_footer>>
#+END_SRC


** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<test_get_footer>>
<<run_test_cases>>
#+end_src
